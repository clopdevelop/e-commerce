generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//PRODUCTO
model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Product Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  state       String
  price       Float
  created_at  DateTime  @default(now())
  last_update DateTime? @updatedAt

  category    Category? @relation(fields: [id_category], references: [id])
  id_category Int?

  variants     ProductVariant[]
  ProductImage ProductImage[]
  OrderItem    OrderItem[]
}

enum Color {
  DEFAULT
  BLUE
  GREEN
  RED
  YELLOW
}

enum Size {
  SIZE_35
  SIZE_36
  SIZE_37
  SIZE_38
  SIZE_39
  SIZE_40
  SIZE_41
  SIZE_42
  SIZE_43
  SIZE_44
  SIZE_45
  SIZE_46
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  stock     Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  color     Color
  size      Size

  @@unique([productId, color, size])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product    Product @relation(fields: [id_product], references: [id])
  id_product Int
}

//PEDIDOS
enum order_type {
  compra
  cambio
  subscripcion
  devolucion
}

enum order_state {
  entregado
  devuelto
  pendiente
  cancelado
}

model Order {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  order_type String
  total      Float
  status     String
  paid       Boolean  @default(false)
  created_at DateTime @default(now())

  user             User         @relation(fields: [id_user], references: [id])
  id_user          String
  deliveryType     DeliveryType
  id_delivery_type Int

  address    Address? @relation(fields: [id_address], references: [id])
  id_address Int?

  OrderItem OrderItem[]
  // invoice   Invoice[]
}

model OrderItem {
  id         Int    @id @default(autoincrement())
  name       String
  quantity   Int
  unit_price Float

  Order      Order   @relation(fields: [id_order], references: [id])
  id_order   Int
  product    Product @relation(fields: [id_product], references: [id])
  id_product Int
}

enum DeliveryType {
  STANDAR
  EXPRESS
  PREMIUM
}

//USUARIO
model User {
  id         String   @id @default(cuid())
  name       String
  username   String   @unique
  bio        String?
  email      String   @unique
  password   String
  role       String   @default("user")
  phone      String?
  ticket_send Boolean @default(false)
  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt

  addresses     Address[]
  Authenticator Authenticator[]
  Order         Order[]
}

//DIRECCION
model Address {
  id          Int      @id @default(autoincrement())
  name        String
  number      Int
  letter      String?
  block       Int?
  staircase   String?
  postalcode  Int
  last_update DateTime @default(now()) @updatedAt

  city    City @relation(fields: [id_city], references: [id])
  id_city Int

  users  User[]
  orders Order[]
}

model City {
  id          Int       @id @default(autoincrement())
  name        String
  province    Province  @relation(fields: [id_province], references: [id_province])
  id_province Int
  Address     Address[]

  @@unique([name, id_province])
}

model Province {
  id_province Int    @id @default(autoincrement())
  iso_code    String @unique
  name        String @unique
  City        City[]
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Invoice {
//   id                Int           @id @default(autoincrement())
//   invoice_n         String        @unique
//   type              String
//   Order             Order         @relation(fields: [id_order], references: [id])
//   id_order          Int
//   created_at        DateTime      @default(now())
//   amount            Float
//   state             String
//   // paymentMethod     PaymentMethod @relation(fields: [id_payment_method], references: [id])
//   paymentMethod     PaymentMethod 
//   id_payment_method Int
// }

// // NEXT-AUTH

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([provider, providerAccountId])
// }

// model Session {
// id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@id([identifier, token])
// }
