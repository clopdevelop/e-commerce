datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id_address  Int        @id @default(autoincrement())
  address     String
  city        City       @relation(fields: [id_city], references: [id_city])
  id_city     Int
  last_update DateTime   @default(now()) @updatedAt
  User        User[]
  Provider    Provider[]
}

model City {
  id_city     Int        @id @default(autoincrement())
  city        String
  province    Province   @relation(fields: [id_province], references: [id_province])
  id_province Int
  Address     Address[]
}

model Province {
  id_province Int        @id @default(autoincrement())
  iso_code    String     @unique
  province    String
  country     Country    @relation(fields: [id_country], references: [id_country])
  id_country  Int
  City        City[]
}

model Country {
  id_country Int        @id @default(autoincrement())
  iso_code   String     @unique
  country    String
  Province   Province[]
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  phone       String?
  password    String
  address     Address?     @relation(fields: [id_address], references: [id_address])
  id_address  Int?
  postcode    String?
  created_at  DateTime     @default(now())
  
  Order       Order[]
}

model Product {
  id                  Int           @id @default(autoincrement())
  code                String?
  name                String
  description         String?
  state               String?
  price               Float         @default(0)
  discount            Int?          @default(0)
  created_at          DateTime      @default(now())
  last_update         DateTime?     @updatedAt
  stock               Int
  
  provider            Provider?     @relation(fields: [id_provider], references: [id_provider])
  id_provider         Int?
  category            Category?     @relation(fields: [id_category], references: [id_category])
  id_category         Int?

  OrderItem           OrderItem[]
}

model Category {
  id_category Int        @id @default(autoincrement())
  name        String     @unique
  state       String?
  Product    Product[]
}

model Provider {
  id_provider Int       @id @default(autoincrement())
  cuit        String
  name        String
  address     Address?  @relation(fields: [id_address], references: [id_address])
  id_address  Int?
  postcode    String
  phone       String?
  email       String
  created_at  DateTime  @default(now())
  products    Product[]
}

model Order {
  id           Int            @id @default(autoincrement())
  total        Float
  status       String       
  paid         Boolean      @default(false)
  discount     Float        @default(0)
  created_at   DateTime     @default(now())

  user         User         @relation(fields: [id_user], references: [id])
  id_user      Int
  deliveryType DeliveryType @relation(fields: [delivery_type], references: [delivery_type])
  delivery_type  String

  OrderItem    OrderItem[]
  invoice      Invoice[]
}

model DeliveryType {
  id_delivery   Int    @id @default(autoincrement())
  delivery_type String @unique
  Order         Order[]
}

model OrderItem {
  id         Int        @id @default(autoincrement())        
  quantity   Int
  unit_price Float

  Order      Order      @relation(fields: [id_order], references: [id])
  id_order   Int
  product    Product    @relation(fields: [id_product], references: [id])
  id_product Int
}

model Invoice {
  id_invoice    Int       @id @default(autoincrement())
  invoice_n     String    @unique
  type          String    
  Order         Order     @relation(fields: [id_order], references: [id])
  id_order      Int
  created_at    DateTime     @default(now())
  amount        Float
  state         String
  paymentMethod PaymentMethod @relation(fields: [id_p_method], references: [id_p_method])
  id_p_method   Int
}

model PaymentMethod {
  id_p_method    Int           @id @default(autoincrement())
  payment_method String
  Invoice        Invoice[]
}

