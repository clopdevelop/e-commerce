// CLIENTPAY FORMULARIO INFORMACIÓN DE PAGO
<div className="grid gap-4">
  <Label htmlFor="invoicingMethod">Método de Pago:</Label>
  <div className="flex justify-end mt-5">
    <Button
      onClick={() => setOpen(false)}
      type="button"
      size="sm"
    >
      Siguiente
    </Button>
  </div>
  <RadioGroup
    defaultValue="card"
    className="grid grid-cols-3 gap-4 my-2"
  >
    <div>
      <RadioGroupItem
        value="card"
        id="card"
        className="peer sr-only"
        
      />
      <Label
        htmlFor="card"
        className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
      >
        <CreditCard className="mb-3"></CreditCard>
        Card
      </Label>
    </div>
    <div>
      <RadioGroupItem
        value="paypal"
        id="paypal"
        className="peer sr-only"
        
      />
      <Label
        htmlFor="paypal"
        className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
      >
        <EuroIcon className="mb-3 h-6 w-6" />
        Paypal
      </Label>
    </div>
    <div>
      <RadioGroupItem
        value="apple"
        id="apple"
        className="peer sr-only"
        
      />
      <Label
        htmlFor="apple"
        className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
      >
        <Apple className="mb-3 h-6 w-6" />
        Apple
      </Label>
    </div>
  </RadioGroup>
  <Label htmlFor="cardHolderName">
    Nombre del Titular de la Tarjeta:
  </Label>
  <Input
    type="text"
    id="cardHolderName"
    name="cardHolderName"
    placeholder={
      payment
        ? payment[0]?.cardHolderName
        : "Ingrese el nombre del titular de la tarjeta"
    }
    className="input"
    required
  />
  <Label htmlFor="cardNumber">Número de Tarjeta:</Label>
  <CardElement></CardElement>
  {/* <Input
    type="text"
    id="cardNumber"
    name="cardNumber"
    placeholder={
      payment
        ? payment[0]?.cardNumber
        : "Ingrese el número de la tarjetaIngrese el número de la tarjeta"
    }
    className="input"
    required
    min="16"
    max="16"
  />
  <div className="grid grid-cols-3 gap-4 mt-2">
    <Select>
      <SelectTrigger id="month">
        <SelectValue
          placeholder={
            payment ? payment[0]?.expirationMonth : "Mes"
          }
        />
      </SelectTrigger>
      <SelectContent>
        <SelectItem value="1">January</SelectItem>
        <SelectItem value="2">February</SelectItem>
        <SelectItem value="3">March</SelectItem>
        <SelectItem value="4">April</SelectItem>
        <SelectItem value="5">May</SelectItem>
        <SelectItem value="6">June</SelectItem>
        <SelectItem value="7">July</SelectItem>
        <SelectItem value="8">August</SelectItem>
        <SelectItem value="9">September</SelectItem>
        <SelectItem value="10">October</SelectItem>
        <SelectItem value="11">November</SelectItem>
        <SelectItem value="12">December</SelectItem>
      </SelectContent>
    </Select>
    <Select>
      <SelectTrigger id="year">
        <SelectValue
          placeholder={
            payment ? payment[0]?.expirationMonth : "Año"
          }
        />
      </SelectTrigger>
      <SelectContent>
        {Array.from({ length: 10 }, (_, i) => (
          <SelectItem
            key={i}
            value={`${new Date().getFullYear() + i}`}
          >
            {new Date().getFullYear() + i}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
    <Input id="cvc" placeholder="CVC" />
  </div> */}
  <FormField
    control={form.control}
    name="mobile"
    render={({ field }) => (
      <>
        <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
          <FormControl>
            <Checkbox
              checked={field.value}
              onCheckedChange={field.onChange}
            />
          </FormControl>
          <div className="space-y-1 leading-none">
            <FormLabel>
              Guardar información de Facturación
            </FormLabel>
          </div>
        </FormItem>
      </>
    )}
  />
</div>


<FormField
          control={form.control}
          name="dob"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Date of birth</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "w-[240px] pl-3 text-left font-normal",
                        !field.value && "text-muted-foreground",
                      )}
                    >
                      {field.value ? (
                        format(field.value, "PPP")
                      ) : (
                        <span>Pick a date</span>
                      )}
                      <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    mode="single"
                    selected={field.value}
                    onSelect={field.onChange}
                    disabled={(date: Date) =>
                      date > new Date() || date < new Date("1900-01-01")
                    }
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
              <FormDescription>
                Your date of birth is used to calculate your age.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
      <FormField
          control={form.control}
          name="language"
          render={({ field }) => (
            <FormItem className="flex flex-col">
              <FormLabel>Language</FormLabel>
              <Popover>
                <PopoverTrigger asChild>
                  <FormControl>
                    <Button
                      variant="outline"
                      role="combobox"
                      className={cn(
                        "w-[200px] justify-between",
                        !field.value && "text-muted-foreground",
                      )}
                    >
                      {field.value
                        ? languages.find(
                            (language) => language.value === field.value,
                          )?.label
                        : "Select language"}
                      <CaretSortIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </FormControl>
                </PopoverTrigger>
                <PopoverContent className="w-[200px] p-0">
                  <Command>
                    <CommandInput placeholder="Search language..." />
                    <CommandEmpty>No language found.</CommandEmpty>
                    <CommandGroup>
                      {languages.map((language) => (
                        <CommandItem
                          value={language.label}
                          key={language.value}
                          onSelect={() => {
                            form.setValue("language", language.value);
                          }}
                        >
                          <CheckIcon
                            className={cn(
                              "mr-2 h-4 w-4",
                              language.value === field.value
                                ? "opacity-100"
                                : "opacity-0",
                            )}
                          />
                          {language.label}
                        </CommandItem>
                      ))}
                    </CommandGroup>
                  </Command>
                </PopoverContent>
              </Popover>
              <FormDescription>
                This is the language that will be used in the dashboard.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
      <div>
          {fields.map((field, index) => (
            <FormField
              control={form.control}
              key={field.id}
              name={`urls.${index}.value`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel className={cn(index !== 0 && "sr-only")}>
                    URLs
                  </FormLabel>
                  <FormDescription className={cn(index !== 0 && "sr-only")}>
                    Add links to your website, blog, or social media profiles.
                  </FormDescription>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          ))}
          <Button
            type="button"
            variant="outline"
            size="sm"
            className="mt-2"
            onClick={() => append({ value: "" })}
          >
            Add URL
          </Button>
        </div>



// FORMULARIO PAGINA PAGO
<Form {...form}>
              <form className="flex gap-5">
                <div className="w-full">
                  <div className="grid gap-4 mb-5">
                    <div className="font-semibold">Información de Envío</div>
                    <Input placeholder="Calle" type="text" />
                    <div className="grid gap-4 md:grid-cols-4">
                      <Input placeholder="Número" type="number" />
                      <Input placeholder="Bloque" type="number" />
                      <Input placeholder="Escalera" type="number" />
                      <Input placeholder="Letra" type="text" />
                    </div>
                    <div className="grid gap-4 md:grid-cols-2">
                    <CityAndProvinceSelector />
                    </div>
                    {/* <Input placeholder="Postal code" type="text" /> */}
                  </div>
                  <FormField
                    control={form.control}
                    name="mobile"
                    render={({ field }) => (
                      <>
                        <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 mb-5">
                          <FormControl>
                            <Checkbox
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                          <div className="space-y-1 leading-none">
                            <FormLabel>
                              Guardar la información de envío
                            </FormLabel>
                          </div>
                        </FormItem>
                      </>
                    )}
                  />
                  <div className="grid gap-5 mt-12">
                    <Label htmlFor="shippingMethod">
                      Selecciona tu método de envío:
                    </Label>
                    <Select
                      name="shippingMethod"
                    >
                      <SelectTrigger className="w-[180px]">
                        <SelectValue placeholder="Elige un método" />
                      </SelectTrigger>
                      <SelectContent className="bg-white rounded-md shadow-md">
                        <SelectItem value="standard">
                          Envío Estándar (3-5 días hábiles)
                        </SelectItem>
                        <SelectItem value="express">
                          Envío Exprés (1-2 días hábiles)
                        </SelectItem>
                        <SelectItem value="premium">
                          Envío Premium (Entrega prioritaria)
                        </SelectItem>
                        <SelectItem value="international">
                          Envío Internacional (Tiempo variable)
                        </SelectItem>
                        <SelectItem value="subscribe">
                          Suscripción de Envío (Descuentos exclusivos)
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                {/* <Separator className="my-4" /> */}
                <div className="w-full">
                  <div className="grid gap-4">
                    <Label htmlFor="invoicingMethod">Método de Pago:</Label>
                    <RadioGroup
                      defaultValue="card"
                      className="grid grid-cols-3 gap-4 my-2"
                    >
                      <div>
                        <RadioGroupItem
                          value="card"
                          id="card"
                          className="peer sr-only"
                        />
                        <Label
                          htmlFor="card"
                          className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
                        >
                          <CreditCard className="mb-3"></CreditCard>
                          Card
                        </Label>
                      </div>
                      <div>
                        <RadioGroupItem
                          value="paypal"
                          id="paypal"
                          className="peer sr-only"
                        />
                        <Label
                          htmlFor="paypal"
                          className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
                        >
                          <EuroIcon className="mb-3 h-6 w-6" />
                          Paypal
                        </Label>
                      </div>
                      <div>
                        <RadioGroupItem
                          value="apple"
                          id="apple"
                          className="peer sr-only"
                        />
                        <Label
                          htmlFor="apple"
                          className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
                        >
                          <Apple className="mb-3 h-6 w-6" />
                          Apple
                        </Label>
                      </div>
                    </RadioGroup>
                    <Label htmlFor="cardHolderName">
                      Nombre del Titular de la Tarjeta:
                    </Label>
                    <Input
                      type="text"
                      id="cardHolderName"
                      name="cardHolderName"
                      placeholder="Ingrese el nombre del titular de la tarjeta"
                      className="input"
                      required
                    />
                    <Label htmlFor="cardNumber">Número de Tarjeta:</Label>
                    <Input
                      type="text"
                      id="cardNumber"
                      name="cardNumber"
                      placeholder="Ingrese el número de la tarjeta"
                      className="input"
                      required
                      min="16"
                      max="16"
                    />
                    <div className="grid grid-cols-3 gap-4 mt-2">
                      <Select>
                        <SelectTrigger id="month">
                          <SelectValue placeholder="Mes" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="1">January</SelectItem>
                          <SelectItem value="2">February</SelectItem>
                          <SelectItem value="3">March</SelectItem>
                          <SelectItem value="4">April</SelectItem>
                          <SelectItem value="5">May</SelectItem>
                          <SelectItem value="6">June</SelectItem>
                          <SelectItem value="7">July</SelectItem>
                          <SelectItem value="8">August</SelectItem>
                          <SelectItem value="9">September</SelectItem>
                          <SelectItem value="10">October</SelectItem>
                          <SelectItem value="11">November</SelectItem>
                          <SelectItem value="12">December</SelectItem>
                        </SelectContent>
                      </Select>
                      <Select>
                        <SelectTrigger id="year">
                          <SelectValue placeholder="Año" />
                        </SelectTrigger>
                        <SelectContent>
                          {Array.from({ length: 10 }, (_, i) => (
                            <SelectItem
                              key={i}
                              value={`${new Date().getFullYear() + i}`}
                            >
                              {new Date().getFullYear() + i}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <Input id="cvc" placeholder="CVC" />
                    </div>
                    <FormField
                      control={form.control}
                      name="mobile"
                      render={({ field }) => (
                        <>
                          <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                            <FormControl>
                              <Checkbox
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                            <div className="space-y-1 leading-none">
                              <FormLabel>
                                Guardar información de Facturación
                              </FormLabel>
                            </div>
                          </FormItem>
                        </>
                      )}
                    />
                  </div>
                  <div className="flex justify-end mt-5">
                    <Button
                      onClick={() => setOpen(false)}
                      type="button"
                      size="sm"
                    >
                      Siguiente
                    </Button>
                  </div>
                </div>
              </form>
            </Form>






            